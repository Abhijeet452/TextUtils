{"version":3,"sources":["components/Navbar.js","components/TextForm.js","components/Alert.js","App.js","reportWebVitals.js","index.js"],"names":["Navbar","props","className","mode","type","to","id","about","onClick","toggleMode","htmlFor","TextForm","useState","text","setText","senscount","sensctr","i","length","sens","str1","mystls","backgroundColor","color","heading","value","onChange","event","target","rows","style","newText","toUpperCase","showAlert","toLowerCase","document","getElementById","select","navigator","clipboard","writeText","split","join","replace","defaultProps","title","Alert","capitalize","word","lower","charAt","slice","alert","role","msg","App","setmode","setalert","message","setTimeout","body","exact","path","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.74f0ba16.chunk.js","sourcesContent":["import React from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport {Link} from 'react-router-dom'\r\nexport default function Navbar(props) {\r\n    return (\r\n        <nav className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}>\r\n            <div className=\"container-fluid\">\r\n                <Link className=\"btn btn-primary mx-3\" type=\"submit\" to=\"/\">TextAnalyzer</Link>\r\n                <button className=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\r\n                    <span className=\"navbar-toggler-icon\"></span>\r\n                </button>\r\n                <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n                    <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link active\" aria-current=\"page\" to=\"/\">Home</Link>\r\n                        </li>\r\n                        <li className=\"nav-item\">\r\n                            <Link className=\"nav-link\" to=\"/about\">{props.about}</Link>\r\n                        </li>\r\n                    </ul>\r\n                    <div className={`form-check form-switch text-${props.mode === 'light' ? 'dark' : 'light'} my-2 mx-3`}>\r\n                        <input type=\"checkbox\" className=\"form-check-input\" onClick={props.toggleMode} id=\"flexSwitchCheckDefault\" />\r\n                        <label className=\"form-check-label\" htmlFor=\"flexSwitchCheckDefault\">{props.mode === 'light' ? 'Enable' : 'Disable'} Dark Mode</label>\r\n                    </div>\r\n                </div>\r\n\r\n            </div>\r\n        </nav>\r\n    )\r\n}\r\n\r\nNavbar.propTypes = {\r\n    title: PropTypes.string.isRequired,\r\n    about: PropTypes.string.isRequired\r\n}\r\nNavbar.defaultProps = {\r\n    title: \"Add title pls\",\r\n    about: \"about daal do bisi\"\r\n}","import React, { useState } from 'react'\r\nexport default function TextForm(props) {\r\n    const [text, setText] = useState('');\r\n    const handleUpClick = () => {\r\n        let newText = text.toUpperCase();\r\n        setText(newText);\r\n        if (text.length === 0) {\r\n            props.showAlert(\"Enter Some Text First\", \"danger\");\r\n        }\r\n        else {\r\n            props.showAlert(\"Converted to Upper Case\", \"success\");\r\n        }\r\n    }\r\n    const handleLoClick = () => {\r\n        let newText = text.toLowerCase();\r\n        setText(newText);\r\n        if (text.length === 0) {\r\n            props.showAlert(\"Enter Some Text First\", \"danger\");\r\n        }\r\n        else {\r\n            props.showAlert(\"Converted to Lower Case\", \"success\");\r\n        }\r\n\r\n    }\r\n    const handleOnClear = () => {\r\n        let newText = '';\r\n        setText(newText);\r\n        if (text.length === 0) {\r\n            props.showAlert(\"TextBox is Empty\", \"warning\");\r\n        }\r\n        else {\r\n            props.showAlert(\"Text Cleared\", \"success\");\r\n        }\r\n    }\r\n    const handleOnCopy = () => {\r\n        if (text.length === 0) {\r\n            props.showAlert(\"Nothing to copy\", \"danger\");\r\n        }\r\n        else {\r\n            let newText = document.getElementById(\"myBox\");\r\n            newText.select();\r\n            navigator.clipboard.writeText(newText.value);\r\n            props.showAlert(\"Copied Text\", \"success\");\r\n        }\r\n    }\r\n    const handleOnExtraSpaces = () => {\r\n        let newText = text.split(/[ ]+/);\r\n        setText(newText.join(\" \"));\r\n        if (text.length === 0) {\r\n            props.showAlert(\"Enter Some Text First\", \"danger\");\r\n        }\r\n        else {\r\n            props.showAlert(\"Removed Extra Spaces\", \"success\");\r\n        }\r\n\r\n    }\r\n    function count_words(str1) {\r\n        // str1 = document.getElementById(\"InputText\").value;\r\n        //exclude  start and end white-space\r\n        str1 = str1.replace(/(^\\s*)|(\\s*$)/gi, \"\");\r\n        //convert 2 or more spaces to 1  \r\n        str1 = str1.replace(/[ ]{2,}/gi, \" \");\r\n        // exclude newline with a start spacing  \r\n        str1 = str1.replace(/\\n /, \"\\n\");\r\n        return str1.split(' ').length;\r\n    }\r\n    const handleOnChange = (event) => {\r\n        setText(event.target.value);\r\n    }\r\n    let senscount = sens();\r\n    function sens() {\r\n        let sensctr = 0;\r\n        for (let i = 0; i < text.length; i++) {\r\n            if (text[i] === '.') {\r\n                sensctr++;\r\n            }\r\n        }\r\n        return sensctr;\r\n    }\r\n    let mystls = {\r\n        backgroundColor: props.mode === 'dark' ? 'rgb(255 255 255 / 15%)' : 'rgb(222 222 222)',\r\n        color: props.mode === 'dark' ? 'White' : 'Black'\r\n    };\r\n    return (\r\n        <>\r\n            <div className=\"container\">\r\n                <h2>{props.heading}</h2>\r\n                <div className=\"mb-3\">\r\n                    <textarea className=\"form-control\" value={text} onChange={handleOnChange} id=\"myBox\" rows=\"10\" style={mystls}></textarea>\r\n                </div>\r\n                <div className=\"d-flex justify-content-center flex-column\">\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleUpClick}>Convert to Upper Case</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleLoClick}>Convert to Lower Case</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleOnClear}>Clear Text</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleOnCopy}>Copy Text</button>\r\n                    <button className=\"btn btn-primary my-2 mx-2\" onClick={handleOnExtraSpaces}>Remove Extra Spaces</button>\r\n                </div>\r\n            </div>\r\n            <div className=\"container my-3\">\r\n                <h1>Text Summary</h1>\r\n                <h4>{text.length} characters {count_words(text)} words {senscount} sentences {text.length / 125} minutes read</h4>\r\n                <h2>Preview</h2>\r\n                <h5>{text.length > 0 ? text : \"Enter Some Text above to preview here :)\"}</h5>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nfunction Alert(props) {\r\n    const capitalize=(word)=>{\r\n        const lower=word.toLowerCase();\r\n        return lower.charAt(0).toUpperCase()+lower.slice(1);\r\n    }\r\n    return (\r\n        props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n            <strong>{capitalize(props.alert.type)==='Danger'?'Failed':capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Alert\r\n","import Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from 'react'\nimport Alert from \"./components/Alert\";\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\";\n\nfunction App() {\n  const [mode, setmode] = useState('light');\n  const [alert, setalert] = useState(null);\n  const showAlert = (message, type) => {\n    setalert({\n      msg: message,\n      type: type,\n    })\n    setTimeout(() => {\n      setalert(null);\n    }, 1500);\n  }\n  const toggleMode = () => {\n    if (mode === 'light') {\n      setmode('dark');\n      document.body.style.backgroundColor = \"rgb(9 30 50)\";\n      document.body.style.color = \"White\";\n      showAlert('Dark Mode has been enabled', \"success\");\n    }\n    else {\n      setmode('light');\n      document.body.style.backgroundColor = \"White\";\n      document.body.style.color = \"rgb(9 30 50)\";\n      showAlert('Light Mode has been enabled', \"success\");\n    }\n  }\n  return (\n    <>\n      <Router>\n        <Navbar about=\"About Us\" mode={mode} toggleMode={toggleMode} />\n        <Alert alert={alert} />\n        <div className=\"container my-3\">\n          <Switch>\n            {/* <Route path=\"/about\">\n              <About/>\n            </Route> */}\n            <Route exact path=\"/\">\n              <TextForm heading=\"Enter Your Text To Analyze\" mode={mode} showAlert={showAlert} />\n            </Route>\n          </Switch>\n        </div>\n      </Router>\n    </>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}